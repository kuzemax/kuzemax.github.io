[{"title":"编写基于arkime的工控插件的学习过程","path":"/2025/02/05/编写基于arkime的工控插件的学习过程/","content":"在虚拟机上安装samba服务器 sudo service smbd start 然后在主机上连接虚拟机 写代码会方便点插件要求：如何基于流量引擎Arkime开发OPC、Modbus、SiemensS7、Ethernet&#x2F;IP、IEC104⼯控协议解析插件.1.能够解析⼯控协议（OPC、Modbus、SiemensS7、Ethernet&#x2F;IP、IEC104）2.以插件so⽅式集成到 Arkime 流量解析引擎3.将解析数据存储到 Elasticsearch,⽀持在Arkime Viewer 界⾯中搜索和查看。技 术 要 求1.兼容多种架构。2.C语⾔开发、涉及第三⽅库或插件的依赖需采⽤静态编译⽅式。3.保证插件与Arkime流量解析引擎⽆缝协作，提升解析和搜索性能 这里先做Modbus插件测试"},{"title":"英语写作和翻译","path":"/2024/12/08/英语写作和翻译/","content":"写作翻译的保底原则： 1.用该单词的上位词来代替该单词； 2.用我们会的单词把这个单词的意思解释出 3.区分大小词 写作翻译高分原则 一、被动 二、非谓语动词 三、并列句 1. 表示原因 because，as ,since, in that because of&#x3D;be responsible for&#x3D;due to&#x3D;owing to&#x3D;thanks to 2. 表示结果 so&#x3D;hence&#x3D;therefore&#x3D;thereby&#x3D;thus&#x3D;consequently&#x3D;in consequence&#x3D;as a result∕consequence 3. 表示并列 and likewise &#x3D;similarly &#x3D; equally&#x3D; simultaneously &#x3D;at the same time&#x3D; in the meanwhile 4. 表示转折 but, by contrast &#x3D; conversely &#x3D; alternatively &#x3D; on the contrary &#x3D; on the other hand &#x3D; otherwise &#x3D; while &#x3D; whereas 5. 表示递进 besides &#x3D; also &#x3D; in addition &#x3D; moreover &#x3D; furthermore &#x3D; apart ∕ aside from this to put it another way &#x3D; in other words 6. 表示引出新对象 ① About &#x3D; concerning &#x3D; regarding &#x3D; with regard to &#x3D; as for ∕ to &#x3D; in respect of 关于 ② in terms of 就……而论，在……方面 ③ when it comes to … 当提到……时 **7.**表示总结 ① On the whole &#x3D; all in all &#x3D;overall &#x3D; in conclusion ∕ summary ∕ general &#x3D; generally （speaking） &#x3D; as a whole &#x3D;mainly &#x3D; substantially &#x3D; to sum up &#x3D; conclude &#x3D; come to the conclusion 总的来说 ② in short ∕ brief &#x3D; in a word 简而言之 ③ in any case &#x3D; at any rate &#x3D; anyway 总之，无论如何 四、复合句 1. 主语从句 学习的动机比学习本身更重要是显而易见的。 It is beyond dispute that the motivation of learning is more important than learning itself. 主语从句 （1） It is … that ① It is common knowledge that… …… ② It is my belief that… ③ It is self-evident that… …… ④ It has been found that… ⑤ It is beyond dispute that… …… ⑥ It is universally acknowledged that… ⑦ It has been widely accepted that… ⑧ It is generally agreed that… 2. 定语和定语从句 I love this kind girl. I love the girl of kindness. I love the girl as kind as an angel. I love the girl being as kind as an angel. I love the girl who keeps so kind. 我是一个美女，喜欢读书和运动。 I am a beauty, and enjoy reading and doing sports. I am a beauty, enjoying reading and doing sports. I am a beauty , who enjoys reading and doing sports. 3. 状语和状语从句 I am listening to the teacher Keeping pets can cultivate the kindness of children although they sometimes bring much trouble for their owners. or because taking care of those little animals needs patience and care. or when there exists only a child in one family. or by taking a shower or talking with those little animals 4. 两大经典句型： （1) 强调句型 It is…that… 很多的因素可以解释我的观点。 Quite a few grounds could account for my argument. 就是基础知识培养了我们解决问题的能力。 It is the basic knowledge that develops our ability to solve problems. 良好的心态能让我们在这个竞争的社会中更平和地生活。 A good attitude can help us live a more peaceful life in this competitive society. （2）倒装 ① 否定词位于句首时 我从来没有这样开心过 i have never been so happy. Never have I been so happy. 在任何情况下我们绝不能忽略…的重要性&#x2F;严重性； we can ignore the gravity&#x2F; severity of sth Under no circumstances. Under no circumstances can we ignore the gravity&#x2F; severity of sth ② 含有 so…that…结构的句子，将 so 引导的部分位于句首时 这个问题是如此重要以至于我们要给与足够的重视。 The issue is so grave&#x2F;severe that we have to pour attention into it. So grave&#x2F;severe is the issue that we have to pour attention into it. ③ only 引出的状语位于句首时 只有以这种方式，我们才能解决这个问题。 Only in this way can we relieve the current situation. 只有拼劲努力，我们才知道自己是不是一匹黑马。 Only by working hard can we know whether we are dark horses. **5.**句子的改写和扩写 ① 我绝不嫁给你。 I will never marry you. (初二水平） You are the man who I will never marry.（定语从句） Never will I marry you.（倒装） It is beyond dipute that I will never marry you. It is you that I will never marry. If I marry you，the sun will rise in the west . ② 读书很重要 Reading books is important. Reading books is believed to be essential. It is widely accepted that reading books is vital. It is with the rapid development of Chinese economy that reading books Is significant. So important is reading books that more time should be spared to appreciate masterpieces. 句子扩写： I love Dayan. Since i saw her for the first time, I have loved dayan who is the most graceful and elegant English teacher 第一段：引出主题的句子： ① Recently the issue &#x2F;problem of…has been in the limelight （处于关注的中心）&#x2F; brought into focus&#x2F; brought to public attentive concern ② Recently, with the development &#x2F;advance&#x2F;progress of science and technology, the phenomenon of … has aroused wide concern. ③Nowadays, it is undeniable that……has almost become the biggest concern of the present-day world. ④What is your idea as to …? There exist a variety of points concerning it. ⑤with respect to&#x2F; with regard to&#x2F; when it comes to&#x2F;…..People’s arguments vary from person to person&#x2F;People may have diverse perspectives on it. ⑥There are different opinions among people as to … 第一段表示个人观点的表达:In my opinion&#x2F;as far as I am concerned&#x2F; for my part&#x2F; from my perspective&#x2F; it keeps my perspective that 第二段分析原因的总起句: ① The majority of people would agree that sth has its deep roots. ② It is superficially a simple phenomenon, but when subjected to analysis, it has its fundamental reasons. ③ There stand at least two reasons, from my perspective, for the present phenomenon . ④ As we know, recognizing a problem is the first step in finding a solution. ⑤ There exist numerous elements being responsible for the issue. ⑥ The reason for this is not far to seek. 第三段总结措施段: 第一句：表示总结的逻辑关系词+ 总结句 第三段首句一定是表示总结性的词: ①On the whole &#x3D; all in all &#x3D;overall &#x3D; in conclusion ∕ summary ∕ general &#x3D; generally （speaking） &#x3D; as a whole &#x3D;mainly &#x3D; substantially &#x3D; to sum up &#x3D; conclude &#x3D; come to the conclusion 总的来说 ② in short ∕ brief &#x3D; in a word 简而言之 把文章中心再说一遍； 推荐： 1.under no circumstances can we ignore the importance&#x2F;severity of sth. what could be done to promote sth&#x2F; to ban sth? so crucial &#x2F;grave is sth that enough attention should have paid to the issue recently. 第二三句话 措施 我们**&#x2F;政府&#x2F;家长&#x2F;**学校 举例：Students, from their early age, could be educated to cultivate the awareness that ….. it is high time for the young to do sth. it is urgent that colleges&#x2F;parents&#x2F;we should do sth. college students cannot fail to do sth. 最后一句：结尾句 ①Only by taking certain steps can people make full use of ____ ②So shouldn’t human beings pay much attention to the meaningful saying &#x2F;problem? ③So under no account could people divert attention from sth. ④The more actively people face the problem, the more happily they will lead their life. ⑤It is high time that the subject about ____ became a focus among youngsters. 模板： 1. 表示原因 be responsible fo 2. 表示结果 in consequence 因此 3. 表示并列 and likewise 4. 表示转折 on the contrary 恰恰相反 5. 表示递进 furthermore 此外; 而且; 与此同时; 再者 6. 表示引出新对象 ③ when it comes to … 当提到……时 **7.**表示总结 in conclusion ∕总的来说 写作时 第一段 Nowadays, it is undeniable that……has almost become the biggest concern of the present-day world.如今，不可否认的是，这几乎已经成为当今世界最关心的问题 it keeps my perspective that 这让我的观点 第二段 It is superficially a simple phenomenon, but when subjected to analysis, it has its fundamental reasons. 从表面上看，这是一个简单的现象，但经过分析，它有其根本原因。 第三段 come to the conclusion 总的来说 under no circumstances can we ignore the importance of sth. it is high time for the young to do sth. 结尾段 i hold the firm belief that the more actively people face the problem, the more happily they will lead their life. 4 翻译步骤 ①以意群为单位读句子， 确定句子的时态和语态 ②确定句子的主干，非主干部分用定语或状语来翻译 ③每句话翻译完之后都要看该句话和下句话的逻辑关系，加逻辑关系词"},{"title":"2024年6月英语六级真题(第3套)生词","path":"/2024/11/25/2024年6月英语六级真题(第3套)生词/","content":"第一篇阅读理解individual &#x2F;ˌɪn.dɪˈvɪdʒ.u.əl&#x2F; noun 个人，个体 （思想或行为）与众不同的人，有个性的人 adjective 个体的，个人的 单个的 独特的，特有的 economic &#x2F;iː.kəˈnɒm.ɪkek.əˈnɒm.ɪk&#x2F; adjective 经济的；经济上的 产生经济效益的；有利可图的；能赚钱的 ladder &#x2F;ˈlæd.ər&#x2F; noun 梯子 （职位晋升的）阶梯；（发展的）阶段 （紧身裤袜或长筒袜的）抽丝，滑丝 （某项体育比赛采用的）阶梯晋级赛 verb （紧身衣、袜子）抽丝；被刮破 prosper &#x2F;ˈprɒs.pər&#x2F; verb （人或企业）成功；（尤指经济上）繁荣，昌盛 mobility &#x2F;məʊˈbɪl.ə.timoʊˈbɪl.ə.t̬i&#x2F; noun 活动性；流动性 可在移动设备上提供服务的能力 industrialize &#x2F;ɪnˈdʌs.tri.ə.laɪz&#x2F; verb （使）工业化 unfavourably &#x2F;ʌnˈfeɪvrəblɪ&#x2F; adverb 不适宜地; 不利地; 反对地; 令人不快地 persist &#x2F;pəˈsɪst&#x2F; verb 持续；存留 坚持不懈；执意 dominate &#x2F;ˈdɒm.ɪ.neɪt&#x2F; verb 统治；控制 在…中占首要地位；拥有优势；最明显的 overwhelming &#x2F;ˌəʊ.vəˈwel.mɪŋˌoʊ.vɚ-&#x2F; adjective 难以抵挡的；无法抗拒的 巨大的，极大的 rag &#x2F;ræɡ&#x2F; noun 旧布，破布 破旧衣服 质量低劣的报纸（或杂志）；低俗小报；粗制滥造的杂志 （英国大学生每年组织的）慈善募捐活动 （一首）雷格泰姆乐曲 verb 戏弄；嘲笑；对…搞恶作剧 feature &#x2F;ˈfiː.tʃər&#x2F; noun 特色，特征，特点 （建筑物的）外部特征；地形 面容的一部分；面貌 （报纸或杂志的）特写；（电视或广播的）专题节目 （电影）故事片，正片 verb 以…为特色；给…以显著的地位 broadcast &#x2F;ˈbrɔːd.kɑːst&#x2F; verb 播送（电视或无线电节目）；广播 noun 电视节目；广播节目 adjective 无线电（或电视）广播的 proportion &#x2F;prəˈpɔː.ʃən&#x2F; noun 部分；份额 比率，比例 （某物各个组成部分或一物与另一物之间的）相称，协调，均衡，匀称 尺寸；大小；形状；程度 重要性，严重性 ubiquitous &#x2F;juːˈbɪk.wɪ.təs&#x2F; adjective 普遍存在的，似乎无处不在的 convince &#x2F;kənˈvɪns&#x2F; verb 说服；使相信；使信服 attainable &#x2F;əˈteɪ.nə.bəl&#x2F; adjective 可以达到的；可以获得的 clip &#x2F;klɪp&#x2F; noun 夹子；别针；回形针 （电影或电视节目的）剪辑，片断 快速，迅速 弹夹，弹匣 修剪 一记耳光 verb 剪，修剪 减少；缩小；缩短 （快速地）碰撞；猛击 （用夹子）夹上，别住，固定住 statement &#x2F;ˈsteɪt.mənt&#x2F; noun （正式的）说明；声明；表态 （银行）对账单 adjective （服饰、珠宝等）吸睛的，时尚的 separate &#x2F;ˈsep.ər.ət&#x2F; adjective 各自的；单独的，不同的 verb （使）分离；（使）分开 （使）分开；（使）分散 分开考虑；认为（两者）不相关 （液体）分离 （夫妻）分居 affiliation &#x2F;əˌfɪl.iˈeɪ.ʃən&#x2F; noun 隶属（关系）；从属关系；联系 republican &#x2F;rɪˈpʌb.lɪ.kən&#x2F; noun 拥护共和政体者；共和主义者 adjective 共和国的；共和政体的 noun 美国共和党党员 北爱尔兰共和主义者 democrat &#x2F;ˈdem.ə.kræt&#x2F; noun 民主主义者，民主派 noun （美国）民主党党员；民主党支持者 implicit &#x2F;ɪmˈplɪs.ɪt&#x2F; adjective 不明言的，含蓄的 无疑问的；无保留的 existing &#x2F;ɪɡˈzɪs.tɪŋ&#x2F; adjective 存在的；现存的 conduct &#x2F;kənˈdʌkt&#x2F; verb 组织；实施；进行；处理 （尤指在公共或正式场合中）举止，表现；为人 引导；带领；指引；给…带路 为…导游，带（游客）游览 指挥（合唱团、乐队等） 传导（电或热） noun 行为，举止；表现；为人 组织方式；实施方式 resident &#x2F;ˈrez.ɪ.dənt&#x2F; noun 居民；住户 （美国的）高级专科住院实习医生 adjective 居住的；定居的；居留的 （有特殊技能或品质者）常驻的 extent &#x2F;ɪkˈstent&#x2F; noun 面积，范围；长度；数量 （某事可能发生的）程度 到达…的程度；到…地步 到…程度；到…地步；以至于 在同样的程度上；同样，一样 在某种程度上 到如此地步 在多大程度上? internal &#x2F;ɪnˈtɜː.nəl&#x2F; adjective 体内的；内部的；国内的 external &#x2F;ɪkˈstɜː.nəl&#x2F; adjective 外面的；外表的；来自外部的 indicate &#x2F;ˈɪn.dɪ.keɪt&#x2F; verb 标示；表明；显示；暗示 打转向灯指示（车行方向） 标示，显示 被建议；有必要 frequent &#x2F;ˈfriː.kwənt&#x2F; adjective 频繁发生的；常见的 verb 常去，常到 conclude &#x2F;kənˈkluːd&#x2F; verb （以…）结束（讲话、会议、文章等） 缔结；达成；议定 断定；决定；推断出；作出（结论） perpetuate &#x2F;pəˈpetʃ.u.eɪt&#x2F; verb 使持续；使长存，使永恒 policy &#x2F;ˈpɒl.ə.si&#x2F; noun 政策，方针，策略 保险单 combat &#x2F;ˈkɒm.bæt&#x2F; noun （尤指战争中的）战斗，搏斗 打斗；斗争；格斗 verb 与…战斗；与…作斗争；打击；制止 capture &#x2F;ˈkæp.tʃər&#x2F; verb 俘虏；俘获；（尤指用武力）夺取 赢得；获得，取得 （用文字或图象）表现，描绘，刻画 拍摄，摄制 （计算机等）采集，储存（信息） 唤起（想象）；引起（关注） trivial &#x2F;ˈtrɪv.i.əl&#x2F; adjective 微不足道的，琐碎的；没有价值的 容易解决的，不费吹灰之力的 consequence &#x2F;ˈkɒn.sɪ.kwəns&#x2F; noun （常指不好或不利的）结果，后果 不重要的；无足轻重的；无关紧要的 reinterpret &#x2F;ˌri:ɪn’tɜ:prɪt&#x2F; verb 重新解释；重新诠释 web 重新解读；重释；再解释 essence &#x2F;ˈesəns&#x2F; noun 本质；实质；要素 本质上；实质上 极其重要；必不可少 （通常取自植物或花的）香精，香料，精油 striking &#x2F;ˈstraɪkɪŋ&#x2F; adjective 异乎寻常的，惊人的；引人注目的 妩媚动人的；很有魅力的 contrast &#x2F;ˈkɒntrɑːst&#x2F; noun 差别，差异；对照，对比 verb 对照，对比 形成对照；显出明显的差异 plight &#x2F;plaɪt&#x2F; noun 困境，窘境 verb 答应结婚，订婚；结婚 第二篇阅读理解occupation &#x2F;ˌɒkjəˈpeɪʃən&#x2F; noun 职业；工作 日常活动；消遣 （军队或一伙人）占领，占据 utter &#x2F;ˈʌtər&#x2F; verb 说；讲；出声 adjective 完全的；十足的；极度的 occasion &#x2F;əˈkeɪʒən&#x2F; noun （尤指某事发生的）时刻，时候 特殊场合；重大活动；盛会 时机，机会；原因，理由 有时；偶尔，间或 verb 造成，引起；惹起 client &#x2F;ˈklaɪənt&#x2F; noun 客户；顾客，主顾；委托人 （连接在服务器上的）客户机 provoke &#x2F;prəˈvəʊk&#x2F; verb 激起，引起（尤指负面反应） 激怒，挑衅 religious &#x2F;rɪˈlɪdʒəs&#x2F; adjective 宗教的；宗教上的 笃信宗教的；虔诚的 clinical &#x2F;ˈklɪnɪkəl&#x2F; adjective 门诊的，临床的 冷漠的；无动于衷的；无感情的 无特色的；冷冰冰的；朴素的 crucial &#x2F;ˈkruːʃəl&#x2F; adjective 至关重要的；关键的；决定性的 eliminate &#x2F;iˈlɪmɪneɪt&#x2F; verb 排除；消除；清除 （比赛中）淘汰 消灭；干掉 volatile &#x2F;ˈvɒlətaɪl&#x2F; adjective 不稳定的；易变的；易怒的，喜怒无常的 （液体或固体）易挥发的，易气化的 central &#x2F;ˈsentrəl&#x2F; adjective 中心的，中央的；中部的；靠近中心的；核心的 主要的；重要的 中央的；中心的 noun （苏格兰）中央区（原为九个地方行政区之一，1996年撤销） grounded &#x2F;ˈɡraʊndɪd&#x2F; adjective 明智的，理智的 （船）搁浅的；（飞机）停飞的 （孩子）受罚不许出门的 conscious &#x2F;ˈkɒnʃəs&#x2F; adjective 意识到；察觉到；感觉到 有意识的；神志清醒的；有知觉的 故意的，存心的；刻意的 suffix （用于名词或副词后）有…意识的，看重…的 sector &#x2F;ˈsektər&#x2F; noun （一国经济活动的）部门，领域，行业 （特定国家的）控制区 ultimately &#x2F;ˈʌltɪmətli&#x2F; adverb 最终，最后 终归，终究 render &#x2F;ˈrendər&#x2F; verb 使成为；使变得；使处于某种状态 翻译；把…译成 给予，提供；表达；表演 粉刷；给（墙壁）抹灰（或水泥） complicated &#x2F;ˈkɒmplɪkeɪtɪd&#x2F; adjective 复杂的；麻烦的；费解的 overrule &#x2F;ˌəʊvəˈruːl&#x2F; verb （指有权威的人）否决，驳回，宣布…无效 assertive &#x2F;əˈsɜːtɪv&#x2F; adjective 坚定自信的；果敢的 perception &#x2F;pəˈsepʃənpɚ-&#x2F; noun 认识，观念，看法 感觉，知觉；感知 感知能力；认识能力；洞察力 emerging &#x2F;ɪˈmɜːdʒɪŋ&#x2F; adjective 新兴的，发展初期的 Fans have been cherished by Chinese people since ancient times, Nowadays,they are not just too;s for cooling off from the summer heat but are more often appreciated as artworks.Many fans are elegantly designed,meticulouslycrafted,"},{"title":"数据库十三周作业","path":"/2024/11/18/数据库十三周作业/","content":"12345678910111213141516171819202122232425262728293031-- 在 student 表中添加“密码”列ALTER TABLE studentADD password varbinary(500);GO-- 创建对称密钥用于加密和解密CREATE SYMMETRIC KEY SymKey_TeachingWITH ALGORITHM = AES_256ENCRYPTION BY PASSWORD = &#x27;YourStrongPassword123&#x27;;GO-- 打开对称密钥以进行数据加密OPEN SYMMETRIC KEY SymKey_TeachingDECRYPTION BY PASSWORD = &#x27;YourStrongPassword123&#x27;;GO-- 更新“密码”列数据，假设添加一个示例密码 &#x27;MyPassword&#x27;（加密后存储）UPDATE studentSET password = ENCRYPTBYKEY(KEY_GUID(&#x27;SymKey_Teaching&#x27;), &#x27;MyPassword&#x27;)WHERE sno = &#x27;SAMPLE001&#x27;;GO-- 解密并显示“密码”列数据SELECT sno, sname, CONVERT(varchar, DECRYPTBYKEY(password)) AS decrypted_passwordFROM studentWHERE sno = &#x27;SAMPLE001&#x27;;GO-- 关闭对称密钥CLOSE SYMMETRIC KEY SymKey_Teaching;GO 12345678910111213141516171819202122232425262728293031323334353637383940414243444546-- 在 student 表中添加“密码”列ALTER TABLE studentADD password varbinary(500);GO-- 创建对称密钥用于加密和解密CREATE SYMMETRIC KEY SymKey_TeachingWITH ALGORITHM = AES_256ENCRYPTION BY PASSWORD = &#x27;YourStrongPassword123&#x27;;GO-- 打开对称密钥以进行数据加密OPEN SYMMETRIC KEY SymKey_TeachingDECRYPTION BY PASSWORD = &#x27;YourStrongPassword123&#x27;;GO-- 更新“密码”列数据，假设添加一个示例密码 &#x27;MyPassword&#x27;（加密后存储）UPDATE studentSET password = ENCRYPTBYKEY(KEY_GUID(&#x27;SymKey_Teaching&#x27;), &#x27;MyPassword&#x27;)WHERE sno = &#x27;SAMPLE001&#x27;;GO-- 解密并显示“密码”列数据SELECT sno, sname, CONVERT(varchar, DECRYPTBYKEY(password)) AS decrypted_passwordFROM studentWHERE sno = &#x27;SAMPLE001&#x27;;GO-- 验证用户身份并显示姓名DECLARE @sno_input CHAR(9) = &#x27;SAMPLE001&#x27;;DECLARE @password_input VARCHAR(500) = &#x27;MyPassword&#x27;;-- 打开对称密钥以进行身份验证OPEN SYMMETRIC KEY SymKey_TeachingDECRYPTION BY PASSWORD = &#x27;YourStrongPassword123&#x27;;GOSELECT sno, snameFROM studentWHERE sno = @sno_input AND CONVERT(VARCHAR, DECRYPTBYKEY(password)) = @password_input;GO-- 关闭对称密钥CLOSE SYMMETRIC KEY SymKey_Teaching;GO"},{"title":"数据库b","path":"/2024/11/18/数据库b/","content":"创建视图，查询所有VIP储户的账户信息（账号，身份证号，密码，开户日期，卡类型，币种，余额，有效期)，要求用子查询完成。然后，分析此视图用户会如何使用，并举出用户使用此视图的例子。上交内容包含创建语句，分析文字以及所有举例语句。 创建视图1234567891011121314151617181920sql复制代码-- 创建视图，用于查询所有VIP储户的账户信息CREATE VIEW View_VIPAccounts ASSELECT a.AccNO, a.IDNO, a.Password, a.OpenDate, a.CardType, a.MoneyType, a.Balance, a.ExpiryDateFROM account aWHERE a.IDNO IN ( SELECT d.IDNO FROM depositor d WHERE d.VIP = &#x27;是&#x27; );GO 视图分析此视图 View_VIPAccounts 提供了所有VIP储户的详细账户信息。用户可以利用此视图方便地查看VIP客户的账户相关数据，有助于优化VIP客户服务、账户管理和风控审查。 用户使用视图的例子 例子 1：查询所有VIP储户的账户详细信息 12345sql复制代码SELECT * FROM View_VIPAccounts; 用途说明: 银行客户经理或系统管理员可以使用此查询查看所有VIP储户的账户信息，以提供个性化服务或进行账户维护。 例子 2：查询VIP储户的账户余额超过一定金额的信息 123sql复制代码SELECT AccNO, IDNO, BalanceFROM View_VIPAccountsWHERE Balance &gt; 50000; 用途说明: 银行风险管理人员可以使用此查询查找余额较高的VIP账户，以进行资金流动性监控和资产配置分析。 创建视图，查询卡中单笔收入超过10000元的储户的姓名、电话和卡号。然后，分析此视图用户会如何使用，并举出用户使用此视图的例子。上交内容包含创建语句，分析文字以及所有举例语句。 创建视图123456789101112131415sql复制代码-- 创建视图，用于查询单笔收入超过10000元的储户信息CREATE VIEW View_HighIncomeDepositors ASSELECT d.Dname, d.Telephone, a.AccNOFROM depositor dJOIN account a ON d.IDNO = a.IDNOJOIN Trecord t ON a.AccNO = t.AccNOWHERE t.Income &gt; 10000;GO 视图分析此视图 View_HighIncomeDepositors 提供了单笔收入超过 10000 元的储户的姓名、电话和卡号信息。用户可以利用此视图快速查看大额收入相关的储户，便于金融风险评估、潜在高净值客户分析、客户关怀策略制定等。 用户使用视图的例子 例子 1：查询所有高收入储户的信息 12345sql复制代码SELECT * FROM View_HighIncomeDepositors; 用途说明: 银行客户经理可以使用此查询获取最近单笔收入超过 10000 元的客户名单，以便进行后续跟进和服务。 例子 2：统计高收入储户的数量 12sql复制代码SELECT COUNT(*) AS HighIncomeDepositorsCountFROM View_HighIncomeDepositors; 用途说明: 银行数据分析员可以使用此查询统计拥有单笔大额收入的储户数量，以了解该群体的规模和分布情况。 创建函数，查询某储户某个月的支出总额，然后调用此函数。上交内容包含创建语句和调用语句 ChatGPT 说：ChatGPT 创建函数12345678910111213141516171819202122sql复制代码-- 创建用于查询某储户在指定月份的支出总额的函数CREATE FUNCTION GetTotalExpenseForDepositor ( @IDNO CHAR(18), -- 储户身份证号 @Year INT, -- 查询年份 @Month INT -- 查询月份)RETURNS MONEYASBEGIN DECLARE @TotalExpense MONEY; -- 计算指定储户在指定月份的支出总额 SELECT @TotalExpense = SUM(Expense) FROM Trecord WHERE AccNO IN (SELECT AccNO FROM account WHERE IDNO = @IDNO) AND YEAR(TDate) = @Year AND MONTH(TDate) = @Month; -- 返回总支出，如果没有记录则返回 0 RETURN ISNULL(@TotalExpense, 0);END;GO 调用函数12345678sql复制代码-- 调用函数查询身份证号为 &#x27;123456789012345678&#x27; 的储户在 2024 年 5 月的支出总额DECLARE @TotalExpense MONEY;SELECT @TotalExpense = dbo.GetTotalExpenseForDepositor(&#x27;123456789012345678&#x27;, 2024, 5);-- 输出结果PRINT &#x27;The total expense for the depositor in May 2024 is: &#x27; + CAST(@TotalExpense AS NVARCHAR(20));GO 说明 函数 GetTotalExpenseForDepositor 会查询 Trecord 表，结合 account 表，获取指定储户在特定年份和月份的支出总额。 如果没有找到匹配的记录，总支出将返回 0。 调用例子展示了如何使用此函数，并将查询结果打印出来。 按交易表的账号和对方账号升序创建普通索引，然后举两个能利用此索引加快查询速度的例子。上交内容包含创建语句以及两个例子。 创建索引1234sql复制代码-- 在交易记录表 (Trecord) 上创建普通索引，按账号 (AccNO) 和对方账号 (OppAccNO) 列升序排列CREATE INDEX idx_AccNO_OppAccNOON Trecord (AccNO ASC, OppAccNO ASC);GO 使用此索引的查询示例 查询特定账号与指定对方账号的交易记录 12345sql复制代码-- 查询账号为 &#x27;12345678901234567890&#x27; 且对方账号为 &#x27;09876543210987654321&#x27; 的所有交易记录SELECT *FROM TrecordWHERE AccNO = &#x27;12345678901234567890&#x27; AND OppAccNO = &#x27;09876543210987654321&#x27;ORDER BY AccNO ASC, OppAccNO ASC; 此查询利用索引加快了同时按 AccNO 和 OppAccNO 进行筛选和排序的操作。 查询所有交易记录，按账号和对方账号排序 1234sql复制代码-- 查询所有交易记录，并按账号和对方账号升序排列SELECT *FROM TrecordORDER BY AccNO ASC, OppAccNO ASC; 此查询利用索引加快了大数据集上按 AccNO 和 OppAccNO 排序的操作。 说明： 创建的索引 idx_AccNO_OppAccNO 能有效加快涉及 AccNO 和 OppAccNO 列的查询速度，特别是在需要按这些列进行联合过滤和排序时。 示例查询展示了如何利用索引来提高性能。第一个示例展示了查询某个账号和对方账号组合的交易记录，第二个示例展示了全表按这两个字段排序的查询。 建一个修改某学生某门课成绩的存储过程，即将某学生某门课成绩加上一个输入的数值，然后调用此存储过程。上交内容包含创建语句和调用语句 好的，下面是创建一个存储过程来修改某学生某门课程的成绩，并将该成绩增加指定数值的 SQL 语句： 1. 创建存储过程1234567891011121314sql复制代码CREATE PROCEDURE UpdateScore @sno CHAR(9), -- 学号 @cno CHAR(4), -- 课程号 @scoreIncrement INT -- 增加的成绩数值ASBEGIN -- 更新成绩，将成绩增加指定的数值 UPDATE sc SET score = score + @scoreIncrement WHERE sno = @sno AND cno = @cno; -- 可以加入返回信息或者检查数据是否更新成功 PRINT &#x27;成绩更新成功&#x27;;END; 2. 调用存储过程12345sql复制代码EXEC UpdateScore @sno = &#x27;202201010&#x27;, @cno = &#x27;CS101&#x27;, @scoreIncrement = 5; 在这个例子中，UpdateScore 存储过程接受三个参数： @sno：学生的学号。 @cno：课程的课程号。 @scoreIncrement：要增加的成绩数值。 存储过程会将指定学生在指定课程上的成绩增加一个数值。 调用存储过程时，可以传入具体的学号、课程号和成绩增量值，例如将学号为 &#39;202201010&#39; 的学生在课程 &#39;CS101&#39; 上的成绩增加 5 分。"},{"title":"数据库A 2","path":"/2024/11/18/数据库A-2/","content":"– 创建视图，查询所有信用卡账户的储户信息CREATE VIEW CreditCardCustomerInfo ASSELECT D.IDNO, D.Dname, D.Telephone, D.VIPFROM depositor DWHERE D.IDNO IN ( SELECT A.IDNO FROM account A WHERE A.CardType &#x3D; ‘信用卡’);GO 创建视图的 SQL 语句：首先，使用子查询来查询所有信用卡账户的储户信息，包括身份证号、姓名、电话和VIP状态。 12345678910sql复制代码-- 创建视图，查询所有信用卡账户的储户信息CREATE VIEW CreditCardCustomerInfo ASSELECT D.IDNO, D.Dname, D.Telephone, D.VIPFROM depositor DWHERE D.IDNO IN ( SELECT A.IDNO FROM account A WHERE A.CardType = &#x27;信用卡&#x27;);GO 分析：此视图 CreditCardCustomerInfo 会返回所有拥有信用卡账户的储户的基本信息（身份证号、姓名、电话、VIP状态）。通过使用子查询，我们能够筛选出所有信用卡账户的储户信息。主查询从 depositor 表中提取相应的储户信息，并通过子查询从 account 表中获取持有信用卡账户的储户的 IDNO。 用户如何使用此视图：此视图的使用场景主要是银行、信用卡公司或其他金融机构需要快速查看所有持有信用卡账户的储户信息。通过此视图，用户可以直接获取这些储户的基本信息，无需每次都编写复杂的查询。 使用示例： 查询所有信用卡储户的基本信息： 如果银行客服或金融机构工作人员需要查看所有信用卡持卡人的基本信息（例如，身份证号、姓名、电话和VIP状态），可以直接使用此视图。 12sql复制代码-- 查询所有信用卡储户的基本信息SELECT * FROM CreditCardCustomerInfo; 查询某个特定储户的信用卡信息： 如果某个客户服务代表需要查询特定身份证号的储户是否持有信用卡，可以使用此视图来检索该储户的基本信息。 12sql复制代码-- 查询身份证号为 &#x27;123456789012345678&#x27; 的储户信息SELECT * FROM CreditCardCustomerInfo WHERE IDNO = &#x27;123456789012345678&#x27;; 查看所有VIP储户的信用卡账户信息： 如果银行想要根据VIP状态筛选持卡人，可以通过查询视图来获取所有VIP信用卡客户的信息。 12sql复制代码-- 查询所有VIP储户的信用卡账户信息SELECT * FROM CreditCardCustomerInfo WHERE VIP = &#x27;是&#x27;; 3– 创建存储过程来修改某账户的余额 12345678910111213141516171819202122CREATE PROCEDURE UpdateAccountBalance @AccNO CHAR(20), -- 输入的账户号 @Amount MONEY -- 要加上的数值，可以为正数（存入）或负数（取出）ASBEGIN -- 检查账户是否存在 IF EXISTS (SELECT 1 FROM account WHERE AccNO = @AccNO) BEGIN -- 更新账户余额 UPDATE account SET Balance = Balance + @Amount WHERE AccNO = @AccNO; PRINT &#x27;账户余额已成功更新。&#x27;; END ELSE BEGIN PRINT &#x27;错误：账户不存在。&#x27;; ENDEND;GO 调用存储过程的语句：12345sql复制代码-- 调用存储过程，将账户号为 &#x27;12345678901234567890&#x27; 的账户余额增加 500.00EXEC UpdateAccountBalance @AccNO = &#x27;12345678901234567890&#x27;, @Amount = 500.00;-- 调用存储过程，将账户号为 &#x27;12345678901234567890&#x27; 的账户余额减少 200.00EXEC UpdateAccountBalance @AccNO = &#x27;12345678901234567890&#x27;, @Amount = -200.00; 4创建函数，查询某储户某个月每张卡的收入明细，然后调用此函数。上交内容包含创建语句和调用语句。（15分） 1234567891011121314151617181920212223242526-- 创建函数，查询某储户某个月每张卡的收入明细CREATE FUNCTION GetIncomeDetailsForDepositor( @IDNO CHAR(18), -- 输入的储户身份证号 @Year INT, -- 输入的年份 @Month INT -- 输入的月份)RETURNS TABLEASRETURN( SELECT T.AccNO, A.CardType, T.TDate, T.Income, T.Place, T.Abstract FROM Trecord T INNER JOIN account A ON T.AccNO = A.AccNO WHERE A.IDNO = @IDNO AND YEAR(T.TDate) = @Year AND MONTH(T.TDate) = @Month AND T.Income IS NOT NULL)GO 调用函数的语句123sql复制代码-- 调用函数并查询指定储户身份证号为 &#x27;123456789012345678&#x27; 在 2024 年 5 月的每张卡的收入明细SELECT * FROM GetIncomeDetailsForDepositor(&#x27;123456789012345678&#x27;, 2024, 5); 5 1234567891011121314151617181920212223-- 创建触发器，限制在储户表上只能在每年6月20日和12月20日修改VIP的值CREATE TRIGGER trg_LimitVIPUpdateON depositorAFTER UPDATEASBEGIN DECLARE @CurrentDate DATE; SET @CurrentDate = CAST(GETDATE() AS DATE); -- 检查是否更新了VIP列，并验证日期 IF UPDATE(VIP) BEGIN IF @CurrentDate NOT IN (&#x27;2024-06-20&#x27;, &#x27;2024-12-20&#x27;) BEGIN ROLLBACK TRANSACTION; RAISERROR(&#x27;VIP字段只能在每年6月20日和12月20日修改。&#x27;, 16, 1); END ENDEND;GO 创建触发器1234567891011121314151617181920sql复制代码-- 创建触发器，限制在储户表上只能在每年6月20日和12月20日修改VIP的值CREATE TRIGGER trg_LimitVIPUpdateON depositorAFTER UPDATEASBEGIN DECLARE @CurrentDate DATE; SET @CurrentDate = CAST(GETDATE() AS DATE); -- 检查是否更新了VIP列，并验证日期 IF UPDATE(VIP) BEGIN IF @CurrentDate NOT IN (&#x27;2024-06-20&#x27;, &#x27;2024-12-20&#x27;) BEGIN ROLLBACK TRANSACTION; RAISERROR(&#x27;VIP字段只能在每年6月20日和12月20日修改。&#x27;, 16, 1); END ENDEND;GO 触发触发器的示例1234sql复制代码-- 示例：尝试在不允许的日期更新VIP字段以触发触发器UPDATE depositorSET VIP = &#x27;是&#x27;WHERE IDNO = &#x27;123456789012345678&#x27;; -- 假设此身份证号存在于表中 6 1234-- 在交易记录表 (Trecord) 上创建普通索引，按账号 (AccNO) 和交易时间 (TDate) 列升序排列CREATE INDEX idx_AccNO_TDateON Trecord (AccNO ASC, TDate ASC);GO 使用此索引的查询示例 查询特定账号的交易记录，按交易时间升序排列 12345sql复制代码-- 查询账号为 &#x27;12345678901234567890&#x27; 的所有交易记录，按交易时间升序排列SELECT *FROM TrecordWHERE AccNO = &#x27;12345678901234567890&#x27;ORDER BY TDate ASC; 此查询利用索引加快了根据 AccNO 筛选并按 TDate 排序的操作。 查询指定时间范围内的所有交易记录，按账号和交易时间升序排列 12345sql复制代码-- 查询从 &#x27;2024-01-01&#x27; 到 &#x27;2024-12-31&#x27; 之间的所有交易记录，并按账号和交易时间升序排列SELECT *FROM TrecordWHERE TDate BETWEEN &#x27;2024-01-01&#x27; AND &#x27;2024-12-31&#x27;ORDER BY AccNO ASC, TDate ASC;"},{"title":"数据库A","path":"/2024/11/18/数据库A/","content":"*第二次平时测验：**A**卷**（**11**月**18**日，**14**：**00**-**15**：**2**0）* *可以直接提交答案，也可以提交**word**文档，注明**A**卷。* 1、创建视图，查询选修学时为4学时、学分为4分的课程的学号、姓名、所选课程号、课程名和成绩。然后，分析此视图用户会如何使用，并举出用户使用此视图的例子。上交内容包含创建语句，分析文字以及所有举例语句。（20分） 2、 – 创建视图，查询选修学时为4学时、学分为4分的课程的学号、姓名、所选课程号、课程名和成绩 CREATE VIEW v_student_course AS SELECT s.sno, s.sname, sc.cno, c.cname, sc.score FROM student s JOIN sc ON s.sno &#x3D; sc.sno JOIN course c ON sc.cno &#x3D; c.cno WHERE c.classhour &#x3D; 4 AND c.credit &#x3D; 4; – 分析此视图用户会如何使用： – 此视图可以用于快速查找满足特定条件的课程及选课学生的信息。教务人员可以利用该视图统计哪些学生在选修4学时且学分为4的课程时的成绩表现。此外，学生可以查询自己的成绩记录来了解选修这些特定课程的成绩。 – 用户使用此视图的例子： – 1. 查询视图中所有记录 SELECT * FROM v_student_course; – 2. 查询某个特定学生在此类课程中的成绩 SELECT * FROM v_student_course WHERE sno &#x3D; ‘202310001’; – 3. 按照成绩排序查看选修这些课程的学生信息 SELECT * FROM v_student_course ORDER BY score DESC; – 4. 查询平均成绩，用于分析学生整体表现 SELECT AVG(score) AS AverageScore FROM v_student_course; 2、创建视图，查询所有信用卡账户的储户信息（身份证号，姓名，电话，VIP)，要求用子查询完成。然后，分析此视图用户会如何使用，并举出用户使用此视图的例子。上交内容包含创建语句，分析文字以及所有举例语句。（20分） – 创建视图，用子查询查询所有信用卡账户的储户信息 CREATE VIEW CreditCardHolders AS SELECT d.IDNO, d.Dname, d.Telephone, d.VIP FROM depositor d WHERE d.IDNO IN ( ​ SELECT a.IDNO ​ FROM account a ​ WHERE a.CardType &#x3D; ‘信用卡’ ); GO – 分析： – 此视图 “CreditCardHolders” 将用于获取所有持有信用卡账户的储户信息，包括身份证号、姓名、电话和VIP状态。 – 用户可以使用该视图来进行快速查询，简化数据获取和报告生成。例如，银行的客户服务部门可以使用此视图来确认信用卡客户的信息， – 或者市场部门可以筛选出信用卡VIP客户以进行精准的营销活动。 – 使用示例： – 1. 查询所有信用卡储户信息 SELECT * FROM CreditCardHolders; – 2. 筛选VIP客户的信用卡信息 SELECT * FROM CreditCardHolders WHERE VIP &#x3D; ‘是’; – 3. 根据电话号码查找特定客户的信息 SELECT * FROM CreditCardHolders WHERE Telephone &#x3D; ‘13812345678’; 3、创建一个修改某账户余额的存储过程，即将某账户的余额加上一个输入的数值，然后调用此存储过程。上交内容包含创建语句和调用语句。（15分） – 创建修改账户余额的存储过程 CREATE PROCEDURE UpdateAccountBalance @AccNO CHAR(20), @Amount MONEY AS BEGIN – 检查账户是否存在 IF EXISTS (SELECT 1 FROM account WHERE AccNO &#x3D; @AccNO) BEGIN ​ – 更新账户余额 ​ UPDATE account ​ SET Balance &#x3D; Balance + @Amount ​ WHERE AccNO &#x3D; @AccNO; ​ PRINT ‘账户余额已成功更新。’; END ELSE BEGIN ​ PRINT ‘错误：未找到指定的账户。’; END END; GO – 调用存储过程示例 DECLARE @AccountNumber CHAR(20) &#x3D; ‘12345678901234567890’; DECLARE @AmountToAdd MONEY &#x3D; 500.00; EXEC UpdateAccountBalance @AccNO &#x3D; @AccountNumber, @Amount &#x3D; @AmountToAdd; 4、创建函数，查询某储户某个月每张卡的收入明细，然后调用此函数。上交内容包含创建语句和调用语句。（15分） – 创建修改账户余额的存储过程 CREATE PROCEDURE UpdateAccountBalance @AccNO CHAR(20), @Amount MONEY AS BEGIN – 检查账户是否存在 IF EXISTS (SELECT 1 FROM account WHERE AccNO &#x3D; @AccNO) BEGIN ​ – 更新账户余额 ​ UPDATE account ​ SET Balance &#x3D; Balance + @Amount ​ WHERE AccNO &#x3D; @AccNO; ​ PRINT ‘账户余额已成功更新。’; END ELSE BEGIN ​ PRINT ‘错误：未找到指定的账户。’; END END; GO – 调用存储过程示例 DECLARE @AccountNumber CHAR(20) &#x3D; ‘12345678901234567890’; DECLARE @AmountToAdd MONEY &#x3D; 500.00; EXEC UpdateAccountBalance @AccNO &#x3D; @AccountNumber, @Amount &#x3D; @AmountToAdd; – 创建查询某储户某个月每张卡的收入明细的函数 CREATE FUNCTION GetIncomeDetails ( @IDNO CHAR(18), @Month INT, @Year INT ) RETURNS TABLE AS RETURN ( SELECT ​ t.AccNO, ​ t.Income, ​ t.TDate, ​ t.Place, ​ t.Abstract FROM Trecord t JOIN account a ON t.AccNO &#x3D; a.AccNO WHERE a.IDNO &#x3D; @IDNO AND MONTH(t.TDate) &#x3D; @Month AND YEAR(t.TDate) &#x3D; @Year AND t.Income IS NOT NULL ); GO – 调用函数示例 SELECT * FROM GetIncomeDetails(‘123456789012345678’, 5, 2024); 5、在储户表上创建触发器，限定只能在每年6月20日和12月20日修改VIP的值，然后触发此触发器。上交内容包含创建语句和一个触发的例子。（15分） – 创建修改账户余额的存储过程 CREATE PROCEDURE UpdateAccountBalance @AccNO CHAR(20), @Amount MONEY AS BEGIN – 检查账户是否存在 IF EXISTS (SELECT 1 FROM account WHERE AccNO &#x3D; @AccNO) BEGIN ​ – 更新账户余额 ​ UPDATE account ​ SET Balance &#x3D; Balance + @Amount ​ WHERE AccNO &#x3D; @AccNO; ​ PRINT ‘账户余额已成功更新。’; END ELSE BEGIN ​ PRINT ‘错误：未找到指定的账户。’; END END; GO – 调用存储过程示例 DECLARE @AccountNumber CHAR(20) &#x3D; ‘12345678901234567890’; DECLARE @AmountToAdd MONEY &#x3D; 500.00; EXEC UpdateAccountBalance @AccNO &#x3D; @AccountNumber, @Amount &#x3D; @AmountToAdd; – 创建查询某储户某个月每张卡的收入明细的函数 CREATE FUNCTION GetIncomeDetails ( @IDNO CHAR(18), @Month INT, @Year INT ) RETURNS TABLE AS RETURN ( SELECT ​ t.AccNO, ​ t.Income, ​ t.TDate, ​ t.Place, ​ t.Abstract FROM Trecord t JOIN account a ON t.AccNO &#x3D; a.AccNO WHERE a.IDNO &#x3D; @IDNO AND MONTH(t.TDate) &#x3D; @Month AND YEAR(t.TDate) &#x3D; @Year AND t.Income IS NOT NULL ); GO – 调用函数示例 SELECT * FROM GetIncomeDetails(‘123456789012345678’, 5, 2024); – 在储户表上创建触发器，限定只能在每年6月20日和12月20日修改VIP的值 CREATE TRIGGER trg_UpdateVIP ON depositor AFTER UPDATE AS BEGIN DECLARE @CurrentDate DATE &#x3D; CAST(GETDATE() AS DATE); – 检查当前日期是否为6月20日或12月20日 IF @CurrentDate NOT IN (‘2024-06-20’, ‘2024-12-20’) BEGIN ​ RAISERROR (‘只能在每年6月20日和12月20日修改VIP的值。’, 16, 1); ​ ROLLBACK TRANSACTION; END END; GO – 触发触发器的示例 UPDATE depositor SET VIP &#x3D; ‘是’ WHERE IDNO &#x3D; ‘123456789012345678’; 6、按交易表的账号和交易时间列升序创建普通索引，然后举两个能利用此索引加快查询速度的例子。上交内容包含创建语句以及两个例子。（15分） 7、– 创建修改账户余额的存储过程 8、CREATE PROCEDURE UpdateAccountBalance 9、 @AccNO CHAR(20), 10、 @Amount MONEY 11、AS 12、BEGIN 13、 – 检查账户是否存在 14、 IF EXISTS (SELECT 1 FROM account WHERE AccNO &#x3D; @AccNO) 15、 BEGIN 16、 – 更新账户余额 17、 UPDATE account 18、 SET Balance &#x3D; Balance + @Amount 19、 WHERE AccNO &#x3D; @AccNO; 20、 21、 PRINT ‘账户余额已成功更新。’; 22、 END 23、 ELSE 24、 BEGIN 25、 PRINT ‘错误：未找到指定的账户。’; 26、 END 27、END; 28、GO 29、 30、– 调用存储过程示例 31、DECLARE @AccountNumber CHAR(20) &#x3D; ‘12345678901234567890’; 32、DECLARE @AmountToAdd MONEY &#x3D; 500.00; 33、 34、EXEC UpdateAccountBalance @AccNO &#x3D; @AccountNumber, @Amount &#x3D; @AmountToAdd; 35、 36、– 创建查询某储户某个月每张卡的收入明细的函数 37、CREATE FUNCTION GetIncomeDetails 38、( 39、 @IDNO CHAR(18), 40、 @Month INT, 41、 @Year INT 42、) 43、RETURNS TABLE 44、AS 45、RETURN 46、( 47、 SELECT 48、 t.AccNO, 49、 t.Income, 50、 t.TDate, 51、 t.Place, 52、 t.Abstract 53、 FROM Trecord t 54、 JOIN account a ON t.AccNO &#x3D; a.AccNO 55、 WHERE a.IDNO &#x3D; @IDNO 56、 AND MONTH(t.TDate) &#x3D; @Month 57、 AND YEAR(t.TDate) &#x3D; @Year 58、 AND t.Income IS NOT NULL 59、); 60、GO 61、 62、– 调用函数示例 63、SELECT * 64、FROM GetIncomeDetails(‘123456789012345678’, 5, 2024); 65、 66、– 在储户表上创建触发器，限定只能在每年6月20日和12月20日修改VIP的值 67、CREATE TRIGGER trg_UpdateVIP 68、ON depositor 69、AFTER UPDATE 70、AS 71、BEGIN 72、 DECLARE @CurrentDate DATE &#x3D; CAST(GETDATE() AS DATE); 73、 74、 – 检查当前日期是否为6月20日或12月20日 75、 IF @CurrentDate NOT IN (‘2024-06-20’, ‘2024-12-20’) 76、 BEGIN 77、 RAISERROR (‘只能在每年6月20日和12月20日修改VIP的值。’, 16, 1); 78、 ROLLBACK TRANSACTION; 79、 END 80、END; 81、GO 82、 83、– 触发触发器的示例 84、UPDATE depositor 85、SET VIP &#x3D; ‘是’ 86、WHERE IDNO &#x3D; ‘123456789012345678’; 87、 88、– 在交易表上创建索引 89、CREATE INDEX idx_Trecord_AccNO_TDate 90、ON Trecord (AccNO ASC, TDate ASC); 91、GO 92、 93、– 示例1：查询特定账户的所有交易记录，并按交易时间排序 94、SELECT * 95、FROM Trecord 96、WHERE AccNO &#x3D; ‘12345678901234567890’ 97、ORDER BY TDate; 98、 99、– 示例2：查询某日期范围内的所有交易记录，并按账号和交易时间排序 100、SELECT * 101、FROM Trecord 102、WHERE TDate BETWEEN ‘2024-01-01’ AND ‘2024-12-31’ 103、ORDER BY AccNO, TDate;"},{"title":"浮点数二分算法模板","path":"/2024/11/15/浮点数二分算法模板/","content":"12345678910111213bool check(double x) &#123;/* ... */&#125; // 检查x是否满足某种性质double bsearch_3(double l, double r)&#123; const double eps = 1e-6; // eps 表示精度，取决于题目对精度的要求 while (r - l &gt; eps) &#123; double mid = (l + r) / 2; if (check(mid)) r = mid; else l = mid; &#125; return l;&#125; 例子: 给定一个浮点数 nn，求它的三次方根。 输入格式共一行，包含一个浮点数 nn。 输出格式共一行，包含一个浮点数，表示问题的解。 注意，结果保留 66 位小数。 数据范围−10000≤n≤10000−10000≤n≤10000 输入样例：11000.00 输出样例：110.000000"},{"title":"整数二分算法","path":"/2024/11/15/整数二分算法/","content":"整数二分算法模板 —— 模板题 AcWing 789. 数的范围1234567891011121314151617181920212223242526bool check(int x) &#123;/* ... */&#125; // 检查x是否满足某种性质// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：int bsearch_1(int l, int r)&#123; while (l &lt; r) &#123; int mid = l + r &gt;&gt; 1; if (check(mid)) r = mid; // check()判断mid是否满足性质 else l = mid + 1; &#125; return l;&#125;// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：int bsearch_2(int l, int r)&#123; while (l &lt; r) &#123; int mid = l + r + 1 &gt;&gt; 1; if (check(mid)) l = mid; else r = mid - 1; &#125; return l;&#125; **例子：**给定一个按照升序排列的长度为 n 的整数数组，以及 q 个查询。 对于每个查询，返回一个元素 k 的起始位置和终止位置（位置从 0 开始计数）。 如果数组中不存在该元素，则返回 -1 -1。 输入格式第一行包含整数 n 和 q，表示数组长度和询问个数。 第二行包含 n 个整数（均在 1∼100001∼10000 范围内），表示完整数组。 接下来 q 行，每行包含一个整数 k，表示一个询问元素。 输出格式共 q 行，每行包含两个整数，表示所求元素的起始位置和终止位置。 如果数组中不存在该元素，则返回 -1 -1。 数据范围1≤n≤1000001≤n≤1000001≤q≤100001≤q≤100001≤k≤100001≤k≤10000 输入样例：123456 31 2 2 3 3 4345 输出样例：1233 45 5-1 -1 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt;using namespace std ;const int N =100010;int q[N];int n ,m;int main ()&#123; scanf(&quot;%d %d&quot;,&amp;n,&amp;m); int k; int l,r; for (int i=0;i&lt;n;i++)scanf(&quot;%d&quot;,&amp;q[i]);while(m--)&#123; scanf(&quot;%d&quot;,&amp;k); l=0; r=n-1; while(l&lt;r)&#123; int mid =(l+r)&gt;&gt;1; if(q[mid]&gt;=k)r=mid; else l =mid+1; &#125; if(q[l]!=k)printf(&quot;-1 -1 &quot;); else &#123;printf(&quot;%d &quot;,l); l=0; r=n-1; while(l&lt;r)&#123; int mid =(r+l+1)&gt;&gt;1; if (q[mid]&lt;=k)l=mid; else r=mid -1; &#125; printf(&quot;%d &quot;,r); &#125; &#125; return 0; &#125;"},{"path":"/2024/11/14/操作系统/","content":"title: 操作系统第一章：计算机系统概述 考纲内容(一)操作系统的基本概念 (二)操作系统的发展历程 (三)程序运行环境 ​\tCPU运行模式：内核模式与用户模式； ​\t中断和异常的处理；系统调用； ​\t程序的链接与装入；程序运行时内存映像与地址空间 (四)操作系统结构 ​\t分层、模块化、宏内核、微内核、外核 (五)操作系统引导 (六)虚拟机 1.1操作系统的基本概念计算机系统自上而下分为4部分：硬件，操作系统，应用程序，用户 什么是OS？ OS是配置在计算机硬件上的第一层系统软件，是对硬件系统的首次扩充；是硬件系统和应用软件间的桥梁；是用户与计算机硬件进行交互的接口；是计算机系统资源的管理者。 OS是一组控制和管理计算机硬件和软件资源、合理地对各类作业进行调度以方便用户使用计算机的程序集合。 注意系统软件和应用软件的区别 操作系统的目标方便性有效性​\t提高系统资源的利用率 ​\t提高系统吞吐量 可扩充性开放性​\t遵循世界标准规范，特别是开放系统互连OS"},{"path":"/2024/11/13/算法归并排序/","content":"title: 归并排序 归并排序算法模板 —— 模板题 AcWing 787. 归并排序 123456789101112131415161718192021void merge_sort(int q[], int l, int r)&#123; if (l &gt;= r) return; int mid = l + r &gt;&gt; 1; merge_sort(q, l, mid); merge_sort(q, mid + 1, r); int k = 0, i = l, j = mid + 1; while (i &lt;= mid &amp;&amp; j &lt;= r) if (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ]; else tmp[k ++ ] = q[j ++ ]; while (i &lt;= mid) tmp[k ++ ] = q[i ++ ]; while (j &lt;= r) tmp[k ++ ] = q[j ++ ]; for (i = l, j = 0; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];&#125; 上一个我感觉讲的太啰嗦了，这次讲的简单点 开头依旧是老朋友，定义一个函数 int mid &#x3D; l + r &gt;&gt; 1; merge_sort(q, l, mid); merge_sort(q, mid + 1, r); 递归老朋友了，还是分成两个区间左边到中间，中间到右边 int k &#x3D; 0, i &#x3D; l, j &#x3D; mid + 1; while (i &lt;&#x3D; mid &amp;&amp; j &lt;&#x3D; r) if (q[i] &lt;&#x3D; q[j]) tmp[k ++ ] &#x3D; q[i ++ ]; else tmp[k ++ ] &#x3D; q[j ++ ]; 从这里开始有点不同了；i&#x3D;l,j&#x3D;mid+1;j是中间值+1 然后是一个while循环，整个函数i和j相当于指针，用指针是为了不改变原来传入的参数的值，然后i和j的移动方向都是从左向右， i &lt;&#x3D; mid &amp;&amp; j &lt;&#x3D; r 循环的条件，最左边的指针向右移动的过程不超过中间值，中间的指针向右移动的过程不超过最右值； if (q[i] &lt;&#x3D; q[j]) tmp[k ++ ] &#x3D; q[i ++ ]; else tmp[k ++ ] &#x3D; q[j ++ ]; 左边的指针指向的值小于右边指针指向的值，将左边指针指向的值传入数组tmp[k]，不然就是将右边指针指向的数传入 即用定义的另外一个空数组将较小的那个值即q[i ++ ]装入。这样就能将部分数据从小到大排一遍。 while (i &lt;&#x3D; mid) tmp[k ++ ] &#x3D; q[i ++ ]; while (j &lt;&#x3D; r) tmp[k ++ ] &#x3D; q[j ++ ]; 这里检测一边的指针走到尽头后，如果另一边还有剩余就将剩余全部放入新建的tmp[k]数组中。这样所有数据就排序完成 for (i &#x3D; l, j &#x3D; 0; i &lt;&#x3D; r; i ++, j ++ ) q[i] &#x3D; tmp[j]; 最后将tmp[]数组中的数据再重新放回q[]这样就排序完成输出q[] 例子： 12345678910111213141516171819202122232425262728293031323334353637383940414243#include&lt;iostream&gt; using namespace std; const int N =100010; int q[N]; int n; int tmp[N]; void merge_sort(int q[],int l, int r) &#123; if(l&gt;=r)return; int mid=(l+r)&gt;&gt;1; merge_sort(q,l,mid); merge_sort(q,mid+1,r); int k =0,i = l, j = mid + 1; while (i&lt;=mid &amp;&amp; j&lt;=r)&#123; if (q[i]&lt;=q[j])tmp[k]=q[i], k++, i++; else tmp[k]=q[j] ,j++,k++; &#125; while(i&lt;=mid) tmp[k++]=q[i++]; while(j&lt;=r) tmp[k++]=q[j++]; for(int i=l,j=0;i&lt;=r;i++,j++)q[i]=tmp[j]; &#125; int main()&#123; scanf(&quot;%d&quot;,&amp;n); for(int i=0; i&lt;n;i++) scanf(&quot;%d&quot;,&amp;q[i]); merge_sort(q,0,n-1); for(int i=0; i&lt;n;i++) printf(&quot;%d &quot;,q[i]); return 0; &#125;"},{"title":"快速排序","path":"/2024/11/13/算法/","content":"学校要求参加一个算法比赛特地来复习一下算法重新分析一下acwing的模板复习自用 1.快速排序算法模板 —— 模板题 AcWing 785. 快速排序 1234567891011121314void quick_sort(int q[], int l, int r)&#123; if (l &gt;= r) return; int i = l - 1, j = r + 1, x = q[l + r &gt;&gt; 1]; while (i &lt; j) &#123; do i ++ ; while (q[i] &lt; x); do j -- ; while (q[j] &gt; x); if (i &lt; j) swap(q[i], q[j]); &#125; quick_sort(q, l, j), quick_sort(q, j + 1, r);&#125; 这是个递归函数 void quick_sort(int q[], int l, int r) 意思是创建一个函数，函数里定义一个整数型数组q[],和整数l,r 这里数据全部放在数组里，其中l,r相当于数组左右两端的指针 我们先看后面的代码再看 if (l &gt;&#x3D; r) return; int i &#x3D; l - 1, j &#x3D; r + 1, x &#x3D; q[l + r &gt;&gt; 1]; 该段代码意思是，定义一个变量i&#x3D;l-1;定义一个变量j&#x3D;r+1。x&#x3D;q[l+r&gt;&gt;1];这里的意思是x取数组中间位置的值 l+r&gt;&gt;1二进制位移了一位相当于除以2. 这是比特操作,可以看做是除2，如12的二进制表示是00001100,12&gt;&gt;1将00001100右移一位，变为00000110，即6.又如15的二进制表示是00001111,15&gt;&gt;1将00001111右移一位，变为00000111，即7.另外&lt;&lt;就是左移，相当于乘以2. 补充一下：如果是12 &gt;&gt; 2，就是将00001100右移两位，变为00000011，即3。相当于12&#x2F;2^2 这里为什么要重新设置两端，将两端都移了一位，用l-1和r+1呢？因为这里我用的是do-while循环，先执行的i++，在执行的判断条件，大家也可以改成while循环。 有人说为什么不一开始就把l和r设置好呢，因为函数是被调用的，你输入的数是两端的，要考虑到用户。 首先我们要了解到我们排完序是左边小于右边 while (i &lt; j) { do i ++ ; while (q[i] &lt; x); do j – ; while (q[j] &gt; x); if (i &lt; j) swap(q[i], q[j]); } 然后是一个while循环,当左边指针在右边指针的左边就循环，相当于左右两边的指针不停的往对方的两边移动，在移动的过程中会有交换数据的情况，然后一旦左右指针相遇然后错过，该循环就应该结束 然后while循环里就是do-while循环先将i+1，然后看i指针指向的值是不是小于x即数组中间指针指向的值，然后如果i小于，指针就往下移一位即从左往右，一旦i&gt;&#x3D;x,到下一步do j – ; while (q[j] &gt; x);就将左边即i放在一边不管，先看右边即j，将j-1,然后然后看j指针指向的值是不是大于x即数组中间指针指向的值，然后如果j大于，指针就往下移一位即从右往左。同理如果不满足条件跳出循环，然后判断指针i是不是在指针j的左边，如果是，将左右指针的值交换，（这样部分值就被排序了）一旦i和j相遇然后他们互相越过就跳出循环 quick_sort(q, l, j), quick_sort(q, j + 1, r); 这里就是递归的关键了将左边和右边再分别放入函数，然后左边不停的左右分，右边也不停的左右分，最后变成只有2个数排序 然后让我们来看一开始的代码 if (l &gt;&#x3D; r) return; return是函数直接返回, 也就是结束该函数,要跳出循环用break, if代码段是不能用break跳出的, 在一个函数内任意位置调用return, 直接退出函数 一般来说一开始输入的数据不可能l&gt;&#x3D;r，这里可以当作一开始的过滤错误输入； 这段代码是用于二分到尽头后开始返回，当每个函数里只有两个数，再分就分不下去了，l&gt;&#x3D;r。然后return,返回上一个函数，上一个函数进行到末尾了然后也要继续返回，一直返回到最初，这个时候数组已经排序完了。 大家可以用小一点的数字自己走一遍。 下面是实例： 快速排序 给定你一个长度为 nn 的整数数列。 请你使用快速排序对这个数列按照从小到大进行排序。 并将排好序的数列按顺序输出。 输入格式输入共两行，第一行包含整数 nn。 第二行包含 nn 个整数（所有整数均在 1∼1091∼109 范围内），表示整个数列。 输出格式输出共一行，包含 nn 个整数，表示排好序的数列。 数据范围1≤n≤1000001≤n≤100000 输入样例：1253 1 2 4 5 输出样例：11 2 3 4 5 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;iostream&gt;using namespace std;const int N =1e6+10;int a[N];int n;void quick_sort(int l, int r,int a[])&#123; int t =1; if (l&gt;=r) return; int x= a[(r+l)&gt;&gt;1]; int i=l-1; int j=r+1; while(i&lt;j)&#123; do i++;while (a[i]&lt;x); do j--;while (a[j]&gt;x); if(i&lt;j)&#123; t=a[i]; a[i]=a[j]; a[j]=t; &#125;; &#125; quick_sort(l,j,a),quick_sort(j+1,r,a); &#125;int main()&#123; scanf(&quot;%d&quot;,&amp;n); for(int i=0 ; i&lt;n;i++) &#123; scanf (&quot;%d&quot;,&amp;a[i]); &#125; quick_sort(0,n-1,a); for(int i=0;i&lt;n;i++) printf(&quot;%d &quot;,a[i]); return 0;&#125;"},{"title":"英语单词生词","path":"/2024/11/12/英语单词生词本1/","content":"英语单词生词本1 remarkable adj 非凡的；奇异的；引人注目的 surgery n 外科手术;（医生或牙医的）;诊所（议员的）接待时间; soundtrack n &#x2F;ˈsaʊnd.træk&#x2F; 电影声迹；（尤指）电影配乐；电影原声音带 trigger &#x2F;ˈtrɪɡ.ər&#x2F; noun （枪的）扳机 （引起某种坏事的）一件事（或情况） verb 引起，引发（坏事）"},{"title":"测试一下Typora","path":"/2024/11/11/测试一下Typora/","content":"测试一下Typora毕竟花了80大洋 然后试试玩玩 斜体 加粗 加粗和斜体 下划线 $$公式块$$ 1代码块 print（&#x27;hello world&#x27;） [!NOTE] 警告框 引用 任务序列"},{"title":"数据作业Chatgpt建表","path":"/2024/11/11/数据作业Chatgpt建表/","content":"建立teaching库 我现在使用SQL Server Management Studio 20进行数据库管理操作。现在我将给你一个数据库的脚本，然后提出一些数据库管理任务，你需要给出对应在这个数据库中的命令。要求：遵循SQL Server Management Studio 20的语法，尽量使用基础命令实现功能，直接了当给出结果，少说没必要的拓展。这是数据库的脚本CREATE DATABASE teaching ON( NAME &#x3D; ‘teaching’,FILENAME &#x3D; ‘E:\\DATA\\teaching.mdf’ ,SIZE &#x3D; 5MB ,MAXSIZE &#x3D; UNLIMITED,FILEGROWTH &#x3D; 10%) LOG ON( NAME &#x3D; ‘teaching_log’,FILENAME &#x3D; ‘E:\\DATA\\teaching_log.ldf’ , SIZE &#x3D; 8MB , MAXSIZE &#x3D; UNLIMITED , FILEGROWTH &#x3D; 1MB )CREATE TABLE student (sno char(9) PRIMARY KEY, sname nvarchar(8) NOT NULL , ssex nchar(1) NOT NULL CHECK (ssexr&#x3D;’男’ or ssex&#x3D;’女’), sbirthday date, en_time date, major nvarchar(10), grade nchar(5) NOT NULL )CREATE TABLE course (cno char(4) PRIMARY KEY, cname nvarchar(20) NOT NULL, classhour tinyint CHECK (classhour&gt;&#x3D;2 and classhour&lt;&#x3D;6), credit tinyint CHECK (credit&gt;&#x3D;1 and credit&lt;&#x3D;5) )CREATE TABLE sc( sno char(10) FOREIGN KEY REFERENCES student(sno), cno char(4) FOREIGN KEY REFERENCES course(cno), score int CHECK (score&gt;&#x3D;0 and score&lt;&#x3D;100), PRIMARY KEY(sno,cno)) 建立bankcard库 1．使用SSMS创建名为“bankcard（银行卡管理）”的数据库，并设置数据库主文件名为bankcard _data，初始大小为10MB，日志文件名为bankcard _log，初始大小为10MB，其它默认。所有的文件都放在目录“F:\\DATA”中。 存放位置也可自行决定。2．在 “bankcard”数据库中完成下列操作。(1)创建“depositor”储户表，表结构如表1：表1 储户表的表结构属性名\t类型\t宽度\t键值\t允许空否\t取值范围\t属性的含义IDNO\tchar\t18\t主键\t否 身份证号Dname\tnvarchar\t10 否 姓名Telephone\tchar\t11 否\t数字字符\t手机号VIP\tnchar\t1 否\t是或否\t贵宾储户 (2)创建“account” 账户表，表结构如表2：表2 账户表的表结构属性名\t类型\t宽度\t键值\t允许空否\t取值范围\t属性的含义AccNO\tchar\t20\t主键\t否\t数字字符\t账号IDNO\tchar\t18\t外键\t否\t参考储户表主键\t身份证号Password\tchar\t6 否\t数字字符\t密码OpenDate\tdate 否\t默认值：当前日期\t开户日期CardType\tnchar\t3 否\t信用卡、借记卡等\t卡类型MoneyType\tnvarchar\t10 否\t人民币、美元等\t币种Balance\tmoney 否 余额ExpiryDate\tdate 否\t〉OpenDate\t有效期(3)创建“Trecord”交易记录表，表结构如表3：表3 交易记录表的表结构属性名\t类型\t宽度\t键值\t允许空否\t取值范围\t属性的含义ID\tint 主键\t否\tIDENTITY(1,1) ，从1开始自动编号\t顺序号TDate\tdate 否\t默认值：当前日期\t交易时间AccNO\tchar\t20\t外键\t否\t数字字符，参考账户表主键\t账号Expense\tmoney 是 支出Income\tmoney 是 收入OppAccNO\tchar\t20\t外键\t是\t数字字符\t对方账号Place\tnvarchar\t30 是 交易地点Abstract\tnvarchar\t20 是\t转账、消费、工资、ATM取款等\t摘要"},{"title":"test","path":"/2024/10/29/test3/","content":"USE teachingGOINSERT into scvalues(‘201501001’,’X003’,NULL),(‘201502005’,’X003’,NULL),(‘201602001’,’C001’,98),(‘201602001’,’C004’,81),(‘201602001’,’X003’,85),(‘201603005’,’C001’,78),(‘201603005’,’C004’,97),(‘201701003’,’C001’,72),(‘201701003’,’E002’,73),(‘201703001’,’C001’,85),(‘201704001’,’E002’,76) Create table teacher(tno int primary key, tname nvarchar(6), prof_title nvarchar(10))gocreate table teacher_salary(tno int primary key foreign key references teacher(tno), tname nvarchar(6), salary int)go insert teacher values(1,’郑浩’,’教授’)insert teacher values(2,’王伟’,’副教授’)insert teacher values(3,’李平’,’讲师’) create table salary_level(prof_title nvarchar(10) primary key , minsalary int, maxsalary int)goinsert salary_level values(‘教授’,7000,8900)insert salary_level values(‘副教授’,5800,7200)insert salary_level values(‘讲师’,4500,5900)insert salary_level values(‘助教’,3900,4900) – 创建触发器，确保教师工资只能涨不能降create trigger trg_salary_increase_onlyon teacher_salaryafter updateasbegin if exists ( select 1 from inserted i join deleted d on i.tno &#x3D; d.tno where i.salary &lt; d.salary ) begin rollback transaction; print ‘工资不能降低，请输入正确的工资变动。’; endend;go – 插入初始工资数据insert into teacher_salary values (1, ‘郑浩’, 7500);insert into teacher_salary values (2, ‘王伟’, 6000);insert into teacher_salary values (3, ‘李平’, 4800);go – 尝试提高工资（会成功）update teacher_salaryset salary &#x3D; 8000where tno &#x3D; 1;go – 尝试降低工资（会触发触发器并回滚）update teacher_salaryset salary &#x3D; 7000where tno &#x3D; 1;go 1– 创建触发器，确保教师工资只能涨不能降CREATE TRIGGER salary_increase_onlyON teacher_salaryFOR UPDATEASDECLARE @tno int, @new_salary int, @old_salary int; – 获取更新前后的数据SELECT @tno &#x3D; i.tno, @new_salary &#x3D; i.salary, @old_salary &#x3D; d.salaryFROM inserted iJOIN deleted d ON i.tno &#x3D; d.tno; – 检查是否有降薪情况IF @new_salary &lt; @old_salaryBEGIN PRINT ‘教师工资不能降低。更新已被取消。’; ROLLBACK;END – 插入初始工资数据insert into teacher_salary values (1, ‘郑浩’, 7500);insert into teacher_salary values (2, ‘王伟’, 6000);insert into teacher_salary values (3, ‘李平’, 4800);go – 尝试更新工资并触发触发器– 提高工资（会成功）update teacher_salaryset salary &#x3D; 8000where tno &#x3D; 1;go – 降低工资（会触发触发器并回滚）update teacher_salaryset salary &#x3D; 7000where tno &#x3D; 1;go 2– 创建学生党费表 st_duesCREATE TABLE st_dues ( sno char(9) PRIMARY KEY FOREIGN KEY REFERENCES student(sno), sname nvarchar(8) NOT NULL, dues money NOT NULL); – 创建触发器，确保只能在每年的6月和12月录入党费CREATE TRIGGER trg_check_dues_monthON st_duesAFTER INSERT, UPDATEASBEGIN DECLARE @currentMonth INT; SELECT @currentMonth &#x3D; MONTH(GETDATE()); IF @currentMonth NOT IN (6, 12) BEGIN ROLLBACK TRANSACTION; RAISERROR (&#39;党费只能在每年的6月或12月交纳&#39;, 16, 1); END END; – 示例插入数据（触发触发器）INSERT INTO st_dues (sno, sname, dues)VALUES (‘123456789’, ‘张三’, 100.00); 3– 删除原有的触发器，如果存在IF EXISTS (SELECT * FROM sys.triggers WHERE name &#x3D; ‘Transactions’)DROP TRIGGER Transactions;GO – 创建新的触发器CREATE TRIGGER TransactionsON TrecordFOR INSERTASBEGIN DECLARE @AccNO CHAR(20); DECLARE @Expense MONEY; DECLARE @Income MONEY; DECLARE @CardType NCHAR(3); DECLARE @NewBalance MONEY; -- 获取插入记录的账号、支出、收入和卡种类 SELECT @AccNO = AccNO, @Expense = Expense, @Income = Income FROM inserted; -- 获取卡种类 SELECT @CardType = CardType, @NewBalance = Balance FROM account WHERE AccNO = @AccNO; -- 检查并更新账户余额 IF @Expense IS NOT NULL BEGIN SET @NewBalance = @NewBalance - @Expense; -- 如果卡类型是借记卡且余额不足，则抛出错误 IF @CardType = N&#39;借记卡&#39; AND @NewBalance &lt; 0 BEGIN RAISERROR (&#39;余额不足，交易失败。&#39;, 16, 1); ROLLBACK TRANSACTION; END ELSE BEGIN UPDATE account SET Balance = @NewBalance WHERE AccNO = @AccNO; END END ELSE BEGIN SET @NewBalance = @NewBalance + @Income; UPDATE account SET Balance = @NewBalance WHERE AccNO = @AccNO; END END;GO – 向交易记录表插入一条带有支出的记录，触发触发器INSERT INTO Trecord (TDate, AccNO, Expense, Income, OppAccNO, Place, Abstract)VALUES (GETDATE(), ‘12345678901234567890’, 500.00, NULL, ‘09876543210987654321’, ‘Supermarket’, ‘消费’); – 向交易记录表插入一条带有收入的记录，触发触发器INSERT INTO Trecord (TDate, AccNO, Expense, Income, OppAccNO, Place, Abstract)VALUES (GETDATE(), ‘12345678901234567890’, NULL, 200.00, ‘09876543210987654321’, ‘Office’, ‘工资’);"},{"title":"传奇ChatGpt驯兽手册","path":"/2024/10/22/test2/","content":"密码学上课助手 Profile现在是大学密码学的课程，请你作为一个经验丰富、技术高深的密码学高级教授，为我讲解一些课题或者疑问。讲解时需要全面完整，思路清晰，可以适当多思考一会，提升内容质量。若是解答小疑问，请简明扼要，尽量简洁高效、快速地回复，避免不必要的拓展，节省时间。在整个聊天中，作出严谨的回答，承认知识盲区（如果有的话）；要体现高级教授的知识特色和教学技巧以便开拓思维、促进理解。接下来我将给出问题，准备好了请说“就绪” 操作系统上课助手 Profile我是一个大三的信息安全学生，正在修读操作系统课程，希望你作为一个知识广博，专业性很强的操作系统老师，为我解答各种疑惑。要求节约时间，阐述简洁，突出实用性。尽量直接且简洁地回答我的问题，避免不必要的拓展。 海选备战助手 Profile背景：我将要参加互联网企业校招的海选，为了让企业招聘人员能看中我，我们需要先准备一下。 前提：我是计算机的学生，具体专业是信息安全，在校期间并没有获得一下能证明自己能力的奖项和证书，因此不能靠履历来获得青睐，只有在校招中通过和招聘官的交流，充分表现出自己的能力，才能获得一个好的结果。 你的身份：我需要你作为一个了解当下形势、富有经验、技术过硬、机灵、随机应变，懂应聘技巧的学长，了解当下的计算机行业的企业招聘实际情况（如果你并不了解，请现在上网查询了解，而不要不懂装懂。如果查询后仍然有不了解的内容，请大方承认它），同时熟悉计算机各方面技术在求职中需要怎样表现（范围包括但不限于：数据处理分析与可视化、数据库运维 、C语言编程，Python编程，熟悉 linux系统， 熟悉网络攻防，网络设备管理，密码学算法编程）。 最终目的是：指导我在应聘中给出能让招聘官青睐的表现。 引导：当我向你提出相关疑问时，给出符合你身份的，最有效贴切的回答；当且仅当我给出 LIKE ”面试官问%学科领域“ 问题时，模拟海选场景，给出如数家珍般的理解与回答。如果我需要补充初始profile，我会以’##Profile’开头补充给你。准备好了说”就绪“。"},{"title":"第一次写一下博客","path":"/2024/10/22/test1/","content":"测试一下各个模块的摆放位置 第一步测试一下标题#标题##标题###标题 标题 --- 第二步试一下段落I really like using Markdown. I think I'll use it to format all of my documents from now on. 第三步试一下换行First line with two spaces after.And the next line. First line with the HTML tag after.And the next line. 第四步试一下强调Loveisbold Italicized text is the cat’s meow. This text is really important. Markdown 引用语法要创建块引用，请在段落前添加一个 &gt; 符号。 Dorothy followed her through many of the beautiful rooms in her castle.渲染效果如下所示： Dorothy followed her through many of the beautiful rooms in her castle. 多个段落的块引用块引用可以包含多个段落。为段落之间的空白行添加一个 &gt; 符号。 Dorothy followed her through many of the beautiful rooms in her castle. The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.渲染效果如下： Dorothy followed her through many of the beautiful rooms in her castle. The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood. 嵌套块引用块引用可以嵌套。在要嵌套的段落前添加一个 &gt;&gt; 符号。 Dorothy followed her through many of the beautiful rooms in her castle. The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.渲染效果如下： Dorothy followed her through many of the beautiful rooms in her castle. The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood. 带有其它元素的块引用块引用可以包含其他 Markdown 格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效。 The quarterly results look great! Revenue was off the chart. Profits were higher than ever. Everything is going according to plan.渲染效果如下： The quarterly results look great!Revenue was off the chart.Profits were higher than ever.Everything is going according to plan. 有序列表要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。 First item Second item Third item Fourth item 无序列表要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。 First item Second item Third item Indented item Indented item Fourth item Markdown 代码语法要将单词或短语表示为代码，请将其包裹在反引号 (&#96;) 中。 At the command prompt, type nano. Markdown 分隔线语法要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容。 Try to put a blank line before… …and after a horizontal rule. Markdown 链接语法链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。 超链接Markdown语法代码：[超链接显示名](超链接地址 &quot;超链接title&quot;) 对应的HTML代码：&lt;a href=&quot;超链接地址&quot; title=&quot;超链接title&quot;&gt;超链接显示名&lt;/a&gt; 这是一个链接 Markdown语法。 Markdown 图片语法要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。 Markdown 表格要添加表，请使用三个或多个连字符（—）创建每列的标题，并使用管道（|）分隔每列。您可以选择在表的任一端添加管道。 Syntax Description Header Title Paragraph Text 对齐您可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心。 Syntax Description Test Text Header Title Here’s this Paragraph Text And more markdown 删除线您可以通过在单词中心放置一条水平线来删除单词。结果看起来像这样。此功能使您可以指示某些单词是一个错误，要从文档中删除。若要删除单词，请在单词前后使用两个波浪号~~。 世界是平坦的。 我们现在知道世界是圆的。"},{"title":"Hello World","path":"/2024/10/22/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]